import { AbstractLoggerFactory } from './AbstractLoggerFactory';
export class DefaultLoggerFactory extends AbstractLoggerFactory {
    loggerFactory;
    static instance;
    constructor(loggerFactory) {
        super();
        this.loggerFactory = loggerFactory;
    }
    /**
     * initialize logger factory class
     * @param factoryInstance
     */
    static init(factoryInstance) {
        this.instance = new DefaultLoggerFactory(factoryInstance);
    }
    /**
     * get instance of the class
     * exist (only in case of absent `init` method)
     */
    static getInstance = () => {
        if (!this.instance)
            throw new Error('You should call `DefaultLoggerFactory.init` before calling `DefaultLoggerFactory.getInstance`');
        return this.instance;
    };
    /**
     * get default, file-agnostic logger
     */
    getDefaultLogger = () => {
        return this.loggerFactory.getDefaultLogger();
    };
    /**
     * get a logger to be used in a specific file located under `filePath`
     *
     * @param filePath
     */
    getLogger = (filePath) => {
        return this.loggerFactory.getLogger(filePath);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVmYXVsdExvZ2dlckZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvRGVmYXVsdExvZ2dlckZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFaEUsTUFBTSxPQUFPLG9CQUFxQixTQUFRLHFCQUFxQjtJQUU3QjtJQUR0QixNQUFNLENBQUMsUUFBUSxDQUF1QjtJQUNoRCxZQUFnQyxhQUFvQztRQUNsRSxLQUFLLEVBQUUsQ0FBQztRQURzQixrQkFBYSxHQUFiLGFBQWEsQ0FBdUI7SUFFcEUsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBc0M7UUFDaEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsRUFBRTtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FDYiwrRkFBK0YsQ0FDaEcsQ0FBQztRQUNKLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILGdCQUFnQixHQUFHLEdBQUcsRUFBRTtRQUN0QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQyxDQUFDLENBQUM7SUFFRjs7OztPQUlHO0lBQ0gsU0FBUyxHQUFHLENBQUMsUUFBZ0IsRUFBRSxFQUFFO1FBQy9CLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RMb2dnZXJGYWN0b3J5IH0gZnJvbSAnLi9BYnN0cmFjdExvZ2dlckZhY3RvcnknO1xuXG5leHBvcnQgY2xhc3MgRGVmYXVsdExvZ2dlckZhY3RvcnkgZXh0ZW5kcyBBYnN0cmFjdExvZ2dlckZhY3Rvcnkge1xuICBwcm90ZWN0ZWQgc3RhdGljIGluc3RhbmNlOiBEZWZhdWx0TG9nZ2VyRmFjdG9yeTtcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBsb2dnZXJGYWN0b3J5OiBBYnN0cmFjdExvZ2dlckZhY3RvcnkpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIGluaXRpYWxpemUgbG9nZ2VyIGZhY3RvcnkgY2xhc3NcbiAgICogQHBhcmFtIGZhY3RvcnlJbnN0YW5jZVxuICAgKi9cbiAgc3RhdGljIGluaXQoZmFjdG9yeUluc3RhbmNlOiBBYnN0cmFjdExvZ2dlckZhY3RvcnkpOiB2b2lkIHtcbiAgICB0aGlzLmluc3RhbmNlID0gbmV3IERlZmF1bHRMb2dnZXJGYWN0b3J5KGZhY3RvcnlJbnN0YW5jZSk7XG4gIH1cblxuICAvKipcbiAgICogZ2V0IGluc3RhbmNlIG9mIHRoZSBjbGFzc1xuICAgKiBleGlzdCAob25seSBpbiBjYXNlIG9mIGFic2VudCBgaW5pdGAgbWV0aG9kKVxuICAgKi9cbiAgc3RhdGljIGdldEluc3RhbmNlID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5pbnN0YW5jZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1lvdSBzaG91bGQgY2FsbCBgRGVmYXVsdExvZ2dlckZhY3RvcnkuaW5pdGAgYmVmb3JlIGNhbGxpbmcgYERlZmF1bHRMb2dnZXJGYWN0b3J5LmdldEluc3RhbmNlYCdcbiAgICAgICk7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIGdldCBkZWZhdWx0LCBmaWxlLWFnbm9zdGljIGxvZ2dlclxuICAgKi9cbiAgZ2V0RGVmYXVsdExvZ2dlciA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5sb2dnZXJGYWN0b3J5LmdldERlZmF1bHRMb2dnZXIoKTtcbiAgfTtcblxuICAvKipcbiAgICogZ2V0IGEgbG9nZ2VyIHRvIGJlIHVzZWQgaW4gYSBzcGVjaWZpYyBmaWxlIGxvY2F0ZWQgdW5kZXIgYGZpbGVQYXRoYFxuICAgKlxuICAgKiBAcGFyYW0gZmlsZVBhdGhcbiAgICovXG4gIGdldExvZ2dlciA9IChmaWxlUGF0aDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMubG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIoZmlsZVBhdGgpO1xuICB9O1xufVxuIl19