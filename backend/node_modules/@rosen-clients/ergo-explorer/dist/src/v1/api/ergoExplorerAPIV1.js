import { bigIntsTransactionInfo, bigIntsItemsTransactionInfo, bigIntsListTransactionInfo, bigIntsListOutputInfo, bigIntsItemsOutputInfo, bigIntsOutputInfo, bigIntsMOutputInfo, bigIntsItemsTokenInfo, bigIntsTokenInfo, bigIntsItemsAssetInfo, bigIntsEpochInfo, bigIntsBalance, bigIntsTotalBalance, bigIntsItemsBlockInfo, bigIntsBlockSummary, bigIntsItemsBlockHeader, bigIntsListBlockInfo, bigIntsListBlockSummaryV1, bigIntsTxIdResponse, bigIntsItemsUTransactionInfo, bigIntsNetworkState, bigIntsNetworkStats, bigIntsErgoTreeHuman, } from '../types';
import { createAxiosInstance, JsonFieldBigintFactory } from '../../axios';
export const getErgoExplorerAPIV1 = (url) => {
    const instance = createAxiosInstance(url);
    const getApiV1TransactionsP1 = (p1) => {
        return instance({
            url: `/api/v1/transactions/${p1}`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsTransactionInfo),
        });
    };
    const getApiV1TransactionsByinputsscripttemplatehashP1 = (p1, params) => {
        return instance({
            url: `/api/v1/transactions/byInputsScriptTemplateHash/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsTransactionInfo),
        });
    };
    /**
     * Get a stream of transactions ordered by global index
     */
    const getApiV1TransactionsByglobalindexStream = (params) => {
        return instance({
            url: `/api/v1/transactions/byGlobalIndex/stream`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsListTransactionInfo),
        });
    };
    const getApiV1BoxesUnspentBylastepochsStream = (params) => {
        return instance({
            url: `/api/v1/boxes/unspent/byLastEpochs/stream`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsListOutputInfo),
        });
    };
    /**
     * Get a stream of unspent outputs ordered by global index
     */
    const getApiV1BoxesUnspentByglobalindexStream = (params) => {
        return instance({
            url: `/api/v1/boxes/unspent/byGlobalIndex/stream`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsListOutputInfo),
        });
    };
    const getApiV1BoxesUnspentStream = (params) => {
        return instance({
            url: `/api/v1/boxes/unspent/stream`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsListOutputInfo),
        });
    };
    /**
     * Get a stream of unspent outputs by a hash of the given ErgoTreeTemplate
     */
    const getApiV1BoxesByergotreetemplatehashP1Stream = (p1, params) => {
        return instance({
            url: `/api/v1/boxes/byErgoTreeTemplateHash/${p1}/stream`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsListOutputInfo),
        });
    };
    const getApiV1BoxesUnspentByergotreetemplatehashP1Stream = (p1, params) => {
        return instance({
            url: `/api/v1/boxes/unspent/byErgoTreeTemplateHash/${p1}/stream`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsListOutputInfo),
        });
    };
    const getApiV1BoxesUnspentBytokenidP1 = (p1, params) => {
        return instance({
            url: `/api/v1/boxes/unspent/byTokenId/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsOutputInfo),
        });
    };
    const getApiV1BoxesBytokenidP1 = (p1, params) => {
        return instance({
            url: `/api/v1/boxes/byTokenId/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsOutputInfo),
        });
    };
    const getApiV1BoxesP1 = (p1) => {
        return instance({
            url: `/api/v1/boxes/${p1}`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsOutputInfo),
        });
    };
    const getApiV1BoxesByergotreeP1 = (p1, params) => {
        return instance({
            url: `/api/v1/boxes/byErgoTree/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsOutputInfo),
        });
    };
    const getApiV1BoxesByergotreetemplatehashP1 = (p1, params) => {
        return instance({
            url: `/api/v1/boxes/byErgoTreeTemplateHash/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsOutputInfo),
        });
    };
    const getApiV1BoxesUnspentByergotreeP1 = (p1, params) => {
        return instance({
            url: `/api/v1/boxes/unspent/byErgoTree/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsOutputInfo),
        });
    };
    const getApiV1BoxesUnspentByergotreetemplatehashP1 = (p1, params) => {
        return instance({
            url: `/api/v1/boxes/unspent/byErgoTreeTemplateHash/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsOutputInfo),
        });
    };
    const getApiV1BoxesByaddressP1 = (p1, params) => {
        return instance({
            url: `/api/v1/boxes/byAddress/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsOutputInfo),
        });
    };
    const getApiV1BoxesUnspentUnconfirmedByaddressP1 = (p1, params) => {
        return instance({
            url: `/api/v1/boxes/unspent/unconfirmed/byAddress/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsMOutputInfo),
        });
    };
    const getApiV1BoxesUnspentByaddressP1 = (p1, params) => {
        return instance({
            url: `/api/v1/boxes/unspent/byAddress/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsOutputInfo),
        });
    };
    /**
     * Get a stream of outputs ordered by global index
     */
    const getApiV1BoxesByglobalindexStream = (params) => {
        return instance({
            url: `/api/v1/boxes/byGlobalIndex/stream`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsListOutputInfo),
        });
    };
    /**
     * Search among UTXO set by ergoTreeTemplateHash and tokens. The resulted UTXOs will contain at lest one of the given tokens.
     */
    const postApiV1BoxesUnspentSearchUnion = (boxAssetsQuery, params) => {
        return instance({
            url: `/api/v1/boxes/unspent/search/union`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: boxAssetsQuery,
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsOutputInfo),
        });
    };
    /**
     * Detailed search among UTXO set
     */
    const postApiV1BoxesUnspentSearch = (boxQuery, params) => {
        return instance({
            url: `/api/v1/boxes/unspent/search`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: boxQuery,
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsOutputInfo),
        });
    };
    /**
     * Detailed search among all boxes in the chain
     */
    const postApiV1BoxesSearch = (boxQuery, params) => {
        return instance({
            url: `/api/v1/boxes/search`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: boxQuery,
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsOutputInfo),
        });
    };
    const getApiV1Tokens = (params) => {
        return instance({
            url: `/api/v1/tokens`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsTokenInfo),
        });
    };
    /**
     * Search by ID or Symbol of an asset. Note that symbols aren't unique.
     */
    const getApiV1TokensSearch = (params) => {
        return instance({
            url: `/api/v1/tokens/search`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsTokenInfo),
        });
    };
    /**
     * Get all assets with a given Symbol. Note that symbols aren't unique.
     */
    const getApiV1TokensBysymbolP1 = (p1) => {
        return instance({
            url: `/api/v1/tokens/bySymbol/${p1}`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsTokenInfo),
        });
    };
    const getApiV1TokensP1 = (p1) => {
        return instance({
            url: `/api/v1/tokens/${p1}`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsTokenInfo),
        });
    };
    /**
     * Use '/tokens' instead
     * @deprecated
     */
    const getApiV1Assets = (params) => {
        return instance({
            url: `/api/v1/assets`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsTokenInfo),
        });
    };
    const getApiV1AssetsSearchBytokenid = (params) => {
        return instance({
            url: `/api/v1/assets/search/byTokenId`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsAssetInfo),
        });
    };
    const getApiV1EpochsParams = () => {
        return instance({
            url: `/api/v1/epochs/params`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsEpochInfo),
        });
    };
    const getApiV1AddressesP1Transactions = (p1, params) => {
        return instance({
            url: `/api/v1/addresses/${p1}/transactions`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsTransactionInfo),
        });
    };
    const getApiV1AddressesP1BalanceConfirmed = (p1, params) => {
        return instance({
            url: `/api/v1/addresses/${p1}/balance/confirmed`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsBalance),
        });
    };
    const getApiV1AddressesP1BalanceTotal = (p1) => {
        return instance({
            url: `/api/v1/addresses/${p1}/balance/total`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsTotalBalance),
        });
    };
    const getApiV1Blocks = (params) => {
        return instance({
            url: `/api/v1/blocks`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsBlockInfo),
        });
    };
    const getApiV1BlocksP1 = (p1) => {
        return instance({
            url: `/api/v1/blocks/${p1}`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsBlockSummary),
        });
    };
    const getApiV1BlocksHeaders = (params) => {
        return instance({
            url: `/api/v1/blocks/headers`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsBlockHeader),
        });
    };
    /**
     * Get a stream of blocks ordered by global index (height)
     */
    const getApiV1BlocksByglobalindexStream = (params) => {
        return instance({
            url: `/api/v1/blocks/byGlobalIndex/stream`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsListBlockInfo),
        });
    };
    /**
     * Get a stream of block summaries ordered by global index (height)
     */
    const getApiV1BlocksStreamSummary = (params) => {
        return instance({
            url: `/api/v1/blocks/stream/summary`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsListBlockSummaryV1),
        });
    };
    const postApiV1MempoolTransactionsSubmit = (postApiV1MempoolTransactionsSubmitBody) => {
        return instance({
            url: `/api/v1/mempool/transactions/submit`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: postApiV1MempoolTransactionsSubmitBody,
            transformResponse: JsonFieldBigintFactory(bigIntsTxIdResponse),
        });
    };
    const getApiV1MempoolTransactionsByaddressP1 = (p1, params) => {
        return instance({
            url: `/api/v1/mempool/transactions/byAddress/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsUTransactionInfo),
        });
    };
    /**
     * Get a stream of unspent outputs
     */
    const getApiV1MempoolBoxesUnspent = () => {
        return instance({
            url: `/api/v1/mempool/boxes/unspent`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsListOutputInfo),
        });
    };
    /**
     * @deprecated
     */
    const getApiV1Info = () => {
        return instance({
            url: `/api/v1/info`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsNetworkState),
        });
    };
    const getApiV1Networkstate = () => {
        return instance({
            url: `/api/v1/networkState`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsNetworkState),
        });
    };
    const getApiV1Networkstats = () => {
        return instance({
            url: `/api/v1/networkStats`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsNetworkStats),
        });
    };
    const postApiV1ErgotreeConvert = (ergoTreeConversionRequest) => {
        return instance({
            url: `/api/v1/ergotree/convert`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: ergoTreeConversionRequest,
            transformResponse: JsonFieldBigintFactory(bigIntsErgoTreeHuman),
        });
    };
    return {
        getApiV1TransactionsP1,
        getApiV1TransactionsByinputsscripttemplatehashP1,
        getApiV1TransactionsByglobalindexStream,
        getApiV1BoxesUnspentBylastepochsStream,
        getApiV1BoxesUnspentByglobalindexStream,
        getApiV1BoxesUnspentStream,
        getApiV1BoxesByergotreetemplatehashP1Stream,
        getApiV1BoxesUnspentByergotreetemplatehashP1Stream,
        getApiV1BoxesUnspentBytokenidP1,
        getApiV1BoxesBytokenidP1,
        getApiV1BoxesP1,
        getApiV1BoxesByergotreeP1,
        getApiV1BoxesByergotreetemplatehashP1,
        getApiV1BoxesUnspentByergotreeP1,
        getApiV1BoxesUnspentByergotreetemplatehashP1,
        getApiV1BoxesByaddressP1,
        getApiV1BoxesUnspentUnconfirmedByaddressP1,
        getApiV1BoxesUnspentByaddressP1,
        getApiV1BoxesByglobalindexStream,
        postApiV1BoxesUnspentSearchUnion,
        postApiV1BoxesUnspentSearch,
        postApiV1BoxesSearch,
        getApiV1Tokens,
        getApiV1TokensSearch,
        getApiV1TokensBysymbolP1,
        getApiV1TokensP1,
        getApiV1Assets,
        getApiV1AssetsSearchBytokenid,
        getApiV1EpochsParams,
        getApiV1AddressesP1Transactions,
        getApiV1AddressesP1BalanceConfirmed,
        getApiV1AddressesP1BalanceTotal,
        getApiV1Blocks,
        getApiV1BlocksP1,
        getApiV1BlocksHeaders,
        getApiV1BlocksByglobalindexStream,
        getApiV1BlocksStreamSummary,
        postApiV1MempoolTransactionsSubmit,
        getApiV1MempoolTransactionsByaddressP1,
        getApiV1MempoolBoxesUnspent,
        getApiV1Info,
        getApiV1Networkstate,
        getApiV1Networkstats,
        postApiV1ErgotreeConvert,
    };
};
//# sourceMappingURL=data:application/json;base64,