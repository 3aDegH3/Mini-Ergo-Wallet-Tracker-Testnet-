import { bigIntsAddressInfo, bigIntsItemsTransactionInfo, bigIntsItemsBalanceInfo, bigIntsItemsOutputInfo, bigIntsOutputInfo, bigIntsItemsBlockInfo, bigIntsBlockSummary, bigIntsDexSellOrderInfo, bigIntsDexBuyOrderInfo, bigIntsTransactionSummary, bigIntsUTransactionSummary, bigIntsItemsUTransactionInfo, bigIntsTransactionInfo, bigIntsTxIdResponse, bigIntsBlockChainInfo, bigIntsStatsSummary, } from '../types';
import { createAxiosInstance, JsonFieldBigintFactory } from '../../axios';
export const getErgoExplorerAPIV0 = (url) => {
    const instance = createAxiosInstance(url);
    const getApiV0AddressesP1 = (p1, params) => {
        return instance({
            url: `/api/v0/addresses/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsAddressInfo),
        });
    };
    const getApiV0AddressesP1Transactions = (p1, params) => {
        return instance({
            url: `/api/v0/addresses/${p1}/transactions`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsTransactionInfo),
        });
    };
    const getApiV0AddressesAssetholdersP1 = (p1, params) => {
        return instance({
            url: `/api/v0/addresses/assetHolders/${p1}`,
            method: 'get',
            params,
        });
    };
    const getApiV0AddressesBalances = (params) => {
        return instance({
            url: `/api/v0/addresses/balances`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsBalanceInfo),
        });
    };
    const getApiV0AssetsIssuingboxes = (params) => {
        return instance({
            url: `/api/v0/assets/issuingBoxes`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsOutputInfo),
        });
    };
    const getApiV0AssetsP1Issuingbox = (p1) => {
        return instance({
            url: `/api/v0/assets/${p1}/issuingBox`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsOutputInfo),
        });
    };
    const getApiV0Blocks = (params) => {
        return instance({
            url: `/api/v0/blocks`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsBlockInfo),
        });
    };
    const getApiV0BlocksP1 = (p1) => {
        return instance({
            url: `/api/v0/blocks/${p1}`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsBlockSummary),
        });
    };
    const getApiV0BlocksAtP1 = (p1) => {
        return instance({
            url: `/api/v0/blocks/at/${p1}`,
            method: 'get',
        });
    };
    /**
     * DEX sell orders for a given token id
     */
    const getApiV0DexTokensP1Unspentsellorders = (p1, params) => {
        return instance({
            url: `/api/v0/dex/tokens/${p1}/unspentSellOrders`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsDexSellOrderInfo),
        });
    };
    /**
     * DEX buy orders for a given token id
     */
    const getApiV0DexTokensP1Unspentbuyorders = (p1, params) => {
        return instance({
            url: `/api/v0/dex/tokens/${p1}/unspentBuyOrders`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsDexBuyOrderInfo),
        });
    };
    const getApiV0TransactionsP1 = (p1) => {
        return instance({
            url: `/api/v0/transactions/${p1}`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsTransactionSummary),
        });
    };
    const getApiV0TransactionsUnconfirmedP1 = (p1) => {
        return instance({
            url: `/api/v0/transactions/unconfirmed/${p1}`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsUTransactionSummary),
        });
    };
    const getApiV0TransactionsUnconfirmedByaddressP1 = (p1, params) => {
        return instance({
            url: `/api/v0/transactions/unconfirmed/byAddress/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsUTransactionInfo),
        });
    };
    const getApiV0TransactionsUnconfirmed = (params) => {
        return instance({
            url: `/api/v0/transactions/unconfirmed`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsItemsUTransactionInfo),
        });
    };
    const getApiV0TransactionsSinceP1 = (p1, params) => {
        return instance({
            url: `/api/v0/transactions/since/${p1}`,
            method: 'get',
            params,
            transformResponse: JsonFieldBigintFactory(bigIntsTransactionInfo),
        });
    };
    const postApiV0TransactionsSend = (postApiV0TransactionsSendBody) => {
        return instance({
            url: `/api/v0/transactions/send`,
            method: 'post',
            headers: { 'Content-Type': 'application/json' },
            data: postApiV0TransactionsSendBody,
            transformResponse: JsonFieldBigintFactory(bigIntsTxIdResponse),
        });
    };
    const getApiV0TransactionsBoxesP1 = (p1) => {
        return instance({
            url: `/api/v0/transactions/boxes/${p1}`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsOutputInfo),
        });
    };
    const getApiV0TransactionsBoxesByergotreeP1 = (p1) => {
        return instance({
            url: `/api/v0/transactions/boxes/byErgoTree/${p1}`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsOutputInfo),
        });
    };
    const getApiV0TransactionsBoxesByergotreeUnspentP1 = (p1) => {
        return instance({
            url: `/api/v0/transactions/boxes/byErgoTree/unspent/${p1}`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsOutputInfo),
        });
    };
    const getApiV0TransactionsBoxesByaddressP1 = (p1) => {
        return instance({
            url: `/api/v0/transactions/boxes/byAddress/${p1}`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsOutputInfo),
        });
    };
    const getApiV0TransactionsBoxesByaddressUnspentP1 = (p1) => {
        return instance({
            url: `/api/v0/transactions/boxes/byAddress/unspent/${p1}`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsOutputInfo),
        });
    };
    const getApiV0Info = () => {
        return instance({
            url: `/api/v0/info`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsBlockChainInfo),
        });
    };
    const getApiV0InfoSupply = () => {
        return instance({
            url: `/api/v0/info/supply`,
            method: 'get',
        });
    };
    const getApiV0Stats = () => {
        return instance({
            url: `/api/v0/stats`,
            method: 'get',
            transformResponse: JsonFieldBigintFactory(bigIntsStatsSummary),
        });
    };
    const getApiV0DocsOpenapi = () => {
        return instance({
            url: `/api/v0/docs/openapi`,
            method: 'get',
        });
    };
    return {
        getApiV0AddressesP1,
        getApiV0AddressesP1Transactions,
        getApiV0AddressesAssetholdersP1,
        getApiV0AddressesBalances,
        getApiV0AssetsIssuingboxes,
        getApiV0AssetsP1Issuingbox,
        getApiV0Blocks,
        getApiV0BlocksP1,
        getApiV0BlocksAtP1,
        getApiV0DexTokensP1Unspentsellorders,
        getApiV0DexTokensP1Unspentbuyorders,
        getApiV0TransactionsP1,
        getApiV0TransactionsUnconfirmedP1,
        getApiV0TransactionsUnconfirmedByaddressP1,
        getApiV0TransactionsUnconfirmed,
        getApiV0TransactionsSinceP1,
        postApiV0TransactionsSend,
        getApiV0TransactionsBoxesP1,
        getApiV0TransactionsBoxesByergotreeP1,
        getApiV0TransactionsBoxesByergotreeUnspentP1,
        getApiV0TransactionsBoxesByaddressP1,
        getApiV0TransactionsBoxesByaddressUnspentP1,
        getApiV0Info,
        getApiV0InfoSupply,
        getApiV0Stats,
        getApiV0DocsOpenapi,
    };
};
//# sourceMappingURL=data:application/json;base64,