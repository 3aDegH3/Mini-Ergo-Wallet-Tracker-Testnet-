declare const ergoExplorerClientFactory: (baseURL: string) => {
    v0: {
        getApiV0AddressesP1: (p1: string, params?: import("./v0/types").GetApiV0AddressesP1Params) => Promise<import("./v0/types").AddressInfo>;
        getApiV0AddressesP1Transactions: (p1: string, params?: import("./v0/types").GetApiV0AddressesP1TransactionsParams) => Promise<import("./v0/types").ItemsTransactionInfo>;
        getApiV0AddressesAssetholdersP1: (p1: string, params?: import("./v0/types").GetApiV0AddressesAssetholdersP1Params) => Promise<string[]>;
        getApiV0AddressesBalances: (params?: import("./v0/types").GetApiV0AddressesBalancesParams) => Promise<import("./v0/types").ItemsBalanceInfo>;
        getApiV0AssetsIssuingboxes: (params?: import("./v0/types").GetApiV0AssetsIssuingboxesParams) => Promise<import("./v0/types").ItemsOutputInfo>;
        getApiV0AssetsP1Issuingbox: (p1: string) => Promise<import("./v0/types").OutputInfo[]>;
        getApiV0Blocks: (params?: import("./v0/types").GetApiV0BlocksParams) => Promise<import("./v0/types").ItemsBlockInfo>;
        getApiV0BlocksP1: (p1: string) => Promise<import("./v0/types").BlockSummary>;
        getApiV0BlocksAtP1: (p1: number) => Promise<string[]>;
        getApiV0DexTokensP1Unspentsellorders: (p1: string, params?: import("./v0/types").GetApiV0DexTokensP1UnspentsellordersParams) => Promise<import("./v0/types").DexSellOrderInfo[]>;
        getApiV0DexTokensP1Unspentbuyorders: (p1: string, params?: import("./v0/types").GetApiV0DexTokensP1UnspentbuyordersParams) => Promise<import("./v0/types").DexBuyOrderInfo[]>;
        getApiV0TransactionsP1: (p1: string) => Promise<import("./v0/types").TransactionSummary>;
        getApiV0TransactionsUnconfirmedP1: (p1: string) => Promise<import("./v0/types").UTransactionSummary>;
        getApiV0TransactionsUnconfirmedByaddressP1: (p1: string, params?: import("./v0/types").GetApiV0TransactionsUnconfirmedByaddressP1Params) => Promise<import("./v0/types").ItemsUTransactionInfo>;
        getApiV0TransactionsUnconfirmed: (params?: import("./v0/types").GetApiV0TransactionsUnconfirmedParams) => Promise<import("./v0/types").ItemsUTransactionInfo>;
        getApiV0TransactionsSinceP1: (p1: number, params?: import("./v0/types").GetApiV0TransactionsSinceP1Params) => Promise<import("./v0/types").TransactionInfo[]>;
        postApiV0TransactionsSend: (postApiV0TransactionsSendBody: import("./v0/types").PostApiV0TransactionsSendBody) => Promise<import("./v0/types").TxIdResponse>;
        getApiV0TransactionsBoxesP1: (p1: string) => Promise<import("./v0/types").OutputInfo>;
        getApiV0TransactionsBoxesByergotreeP1: (p1: string) => Promise<import("./v0/types").OutputInfo[]>;
        getApiV0TransactionsBoxesByergotreeUnspentP1: (p1: string) => Promise<import("./v0/types").OutputInfo[]>;
        getApiV0TransactionsBoxesByaddressP1: (p1: string) => Promise<import("./v0/types").OutputInfo[]>;
        getApiV0TransactionsBoxesByaddressUnspentP1: (p1: string) => Promise<import("./v0/types").OutputInfo[]>;
        getApiV0Info: () => Promise<import("./v0/types").BlockChainInfo>;
        getApiV0InfoSupply: () => Promise<string>;
        getApiV0Stats: () => Promise<import("./v0/types").StatsSummary>;
        getApiV0DocsOpenapi: () => Promise<string>;
    };
    v1: {
        getApiV1TransactionsP1: (p1: string) => Promise<import("./v1/types").TransactionInfo>;
        getApiV1TransactionsByinputsscripttemplatehashP1: (p1: string, params?: import("./v1/types").GetApiV1TransactionsByinputsscripttemplatehashP1Params) => Promise<import("./v1/types").ItemsTransactionInfo>;
        getApiV1TransactionsByglobalindexStream: (params: import("./v1/types").GetApiV1TransactionsByglobalindexStreamParams) => Promise<import("./v1/types").ListTransactionInfo>;
        getApiV1BoxesUnspentBylastepochsStream: (params: import("./v1/types").GetApiV1BoxesUnspentBylastepochsStreamParams) => Promise<import("./v1/types").ListOutputInfo>;
        getApiV1BoxesUnspentByglobalindexStream: (params: import("./v1/types").GetApiV1BoxesUnspentByglobalindexStreamParams) => Promise<import("./v1/types").ListOutputInfo>;
        getApiV1BoxesUnspentStream: (params: import("./v1/types").GetApiV1BoxesUnspentStreamParams) => Promise<import("./v1/types").ListOutputInfo>;
        getApiV1BoxesByergotreetemplatehashP1Stream: (p1: string, params: import("./v1/types").GetApiV1BoxesByergotreetemplatehashP1StreamParams) => Promise<import("./v1/types").ListOutputInfo>;
        getApiV1BoxesUnspentByergotreetemplatehashP1Stream: (p1: string, params: import("./v1/types").GetApiV1BoxesUnspentByergotreetemplatehashP1StreamParams) => Promise<import("./v1/types").ListOutputInfo>;
        getApiV1BoxesUnspentBytokenidP1: (p1: string, params?: import("./v1/types").GetApiV1BoxesUnspentBytokenidP1Params) => Promise<import("./v1/types").ItemsOutputInfo>;
        getApiV1BoxesBytokenidP1: (p1: string, params?: import("./v1/types").GetApiV1BoxesBytokenidP1Params) => Promise<import("./v1/types").ItemsOutputInfo>;
        getApiV1BoxesP1: (p1: string) => Promise<import("./v1/types").OutputInfo>;
        getApiV1BoxesByergotreeP1: (p1: string, params?: import("./v1/types").GetApiV1BoxesByergotreeP1Params) => Promise<import("./v1/types").ItemsOutputInfo>;
        getApiV1BoxesByergotreetemplatehashP1: (p1: string, params?: import("./v1/types").GetApiV1BoxesByergotreetemplatehashP1Params) => Promise<import("./v1/types").ItemsOutputInfo>;
        getApiV1BoxesUnspentByergotreeP1: (p1: string, params?: import("./v1/types").GetApiV1BoxesUnspentByergotreeP1Params) => Promise<import("./v1/types").ItemsOutputInfo>;
        getApiV1BoxesUnspentByergotreetemplatehashP1: (p1: string, params?: import("./v1/types").GetApiV1BoxesUnspentByergotreetemplatehashP1Params) => Promise<import("./v1/types").ItemsOutputInfo>;
        getApiV1BoxesByaddressP1: (p1: string, params?: import("./v1/types").GetApiV1BoxesByaddressP1Params) => Promise<import("./v1/types").ItemsOutputInfo>;
        getApiV1BoxesUnspentUnconfirmedByaddressP1: (p1: string, params?: import("./v1/types").GetApiV1BoxesUnspentUnconfirmedByaddressP1Params) => Promise<import("./v1/types").MOutputInfo[]>;
        getApiV1BoxesUnspentByaddressP1: (p1: string, params?: import("./v1/types").GetApiV1BoxesUnspentByaddressP1Params) => Promise<import("./v1/types").ItemsOutputInfo>;
        getApiV1BoxesByglobalindexStream: (params: import("./v1/types").GetApiV1BoxesByglobalindexStreamParams) => Promise<import("./v1/types").ListOutputInfo>;
        postApiV1BoxesUnspentSearchUnion: (boxAssetsQuery: import("./v1/types").BoxAssetsQuery, params?: import("./v1/types").PostApiV1BoxesUnspentSearchUnionParams) => Promise<import("./v1/types").ItemsOutputInfo>;
        postApiV1BoxesUnspentSearch: (boxQuery: import("./v1/types").BoxQuery, params?: import("./v1/types").PostApiV1BoxesUnspentSearchParams) => Promise<import("./v1/types").ItemsOutputInfo>;
        postApiV1BoxesSearch: (boxQuery: import("./v1/types").BoxQuery, params?: import("./v1/types").PostApiV1BoxesSearchParams) => Promise<import("./v1/types").ItemsOutputInfo>;
        getApiV1Tokens: (params?: import("./v1/types").GetApiV1TokensParams) => Promise<import("./v1/types").ItemsTokenInfo>;
        getApiV1TokensSearch: (params: import("./v1/types").GetApiV1TokensSearchParams) => Promise<import("./v1/types").ItemsTokenInfo>;
        getApiV1TokensBysymbolP1: (p1: string) => Promise<import("./v1/types").TokenInfo[]>;
        getApiV1TokensP1: (p1: string) => Promise<import("./v1/types").TokenInfo>;
        getApiV1Assets: (params?: import("./v1/types").GetApiV1AssetsParams) => Promise<import("./v1/types").ItemsTokenInfo>;
        getApiV1AssetsSearchBytokenid: (params: import("./v1/types").GetApiV1AssetsSearchBytokenidParams) => Promise<import("./v1/types").ItemsAssetInfo>;
        getApiV1EpochsParams: () => Promise<import("./v1/types").EpochInfo>;
        getApiV1AddressesP1Transactions: (p1: string, params?: import("./v1/types").GetApiV1AddressesP1TransactionsParams) => Promise<import("./v1/types").ItemsTransactionInfo>;
        getApiV1AddressesP1BalanceConfirmed: (p1: string, params?: import("./v1/types").GetApiV1AddressesP1BalanceConfirmedParams) => Promise<import("./v1/types").Balance>;
        getApiV1AddressesP1BalanceTotal: (p1: string) => Promise<import("./v1/types").TotalBalance>;
        getApiV1Blocks: (params?: import("./v1/types").GetApiV1BlocksParams) => Promise<import("./v1/types").ItemsBlockInfo>;
        getApiV1BlocksP1: (p1: string) => Promise<import("./v1/types").BlockSummary>;
        getApiV1BlocksHeaders: (params?: import("./v1/types").GetApiV1BlocksHeadersParams) => Promise<import("./v1/types").ItemsBlockHeader>;
        getApiV1BlocksByglobalindexStream: (params: import("./v1/types").GetApiV1BlocksByglobalindexStreamParams) => Promise<import("./v1/types").ListBlockInfo>;
        getApiV1BlocksStreamSummary: (params?: import("./v1/types").GetApiV1BlocksStreamSummaryParams) => Promise<import("./v1/types").ListBlockSummaryV1>;
        postApiV1MempoolTransactionsSubmit: (postApiV1MempoolTransactionsSubmitBody: import("./v1/types").PostApiV1MempoolTransactionsSubmitBody) => Promise<import("./v1/types").TxIdResponse>;
        getApiV1MempoolTransactionsByaddressP1: (p1: string, params?: import("./v1/types").GetApiV1MempoolTransactionsByaddressP1Params) => Promise<import("./v1/types").ItemsUTransactionInfo>;
        getApiV1MempoolBoxesUnspent: () => Promise<import("./v1/types").ListOutputInfo>;
        getApiV1Info: () => Promise<import("./v1/types").NetworkState>;
        getApiV1Networkstate: () => Promise<import("./v1/types").NetworkState>;
        getApiV1Networkstats: () => Promise<import("./v1/types").NetworkStats>;
        postApiV1ErgotreeConvert: (ergoTreeConversionRequest: import("./v1/types").ErgoTreeConversionRequest) => Promise<import("./v1/types").ErgoTreeHuman>;
    };
};
export default ergoExplorerClientFactory;
export * from './types';
//# sourceMappingURL=index.d.ts.map