import { DummyLogger } from '@rosen-bridge/abstract-logger';
import { Semaphore } from 'await-semaphore';
export class RateLimitedAxiosConfig {
    static limitRules = [];
    static logger = new DummyLogger();
    /**
     * Add new rule to apply rate limit for it
     * @param pattern
     * @param rateLimit
     * @param throttleWindow
     */
    static addRule(pattern, rateLimit, throttleWindow, timeout) {
        RateLimitedAxiosConfig.removeRule(pattern);
        RateLimitedAxiosConfig.limitRules.push({
            pattern: new RegExp(pattern),
            semaphore: new Semaphore(rateLimit),
            throttleWindow: throttleWindow,
            timeout: timeout,
        });
    }
    /**
     * Remove rule from rate limited pattern list
     * @param pattern
     */
    static removeRule(pattern) {
        RateLimitedAxiosConfig.limitRules =
            RateLimitedAxiosConfig.limitRules.filter((r) => r.pattern.source !== pattern);
    }
    /**
     * Get current rate limit rules
     * @returns
     */
    static getRules() {
        return RateLimitedAxiosConfig.limitRules;
    }
    /**
     * Set logger for RateLimitedAxios
     * @param logger
     */
    static setLogger(logger) {
        RateLimitedAxiosConfig.logger = logger;
    }
    /**
     * get logger of RateLimitedAxios
     * @returns
     */
    static getLogger() {
        return RateLimitedAxiosConfig.logger;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vbGliL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWtCLFdBQVcsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRTVFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU1QyxNQUFNLE9BQU8sc0JBQXNCO0lBQ3ZCLE1BQU0sQ0FBQyxVQUFVLEdBQVcsRUFBRSxDQUFDO0lBQy9CLE1BQU0sQ0FBQyxNQUFNLEdBQW1CLElBQUksV0FBVyxFQUFFLENBQUM7SUFFNUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsT0FBTyxDQUNuQixPQUFlLEVBQ2YsU0FBaUIsRUFDakIsY0FBc0IsRUFDdEIsT0FBZTtRQUVmLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBQ3JDLE9BQU8sRUFBRSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDNUIsU0FBUyxFQUFFLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQztZQUNuQyxjQUFjLEVBQUUsY0FBYztZQUM5QixPQUFPLEVBQUUsT0FBTztTQUNqQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFlO1FBQ3RDLHNCQUFzQixDQUFDLFVBQVU7WUFDL0Isc0JBQXNCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FDdEMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLE9BQU8sQ0FDcEMsQ0FBQztJQUNOLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsUUFBUTtRQUNwQixPQUFPLHNCQUFzQixDQUFDLFVBQVUsQ0FBQztJQUMzQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFzQjtRQUM1QyxzQkFBc0IsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsU0FBUztRQUNyQixPQUFPLHNCQUFzQixDQUFDLE1BQU0sQ0FBQztJQUN2QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RMb2dnZXIsIER1bW15TG9nZ2VyIH0gZnJvbSAnQHJvc2VuLWJyaWRnZS9hYnN0cmFjdC1sb2dnZXInO1xuaW1wb3J0IHsgUnVsZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgU2VtYXBob3JlIH0gZnJvbSAnYXdhaXQtc2VtYXBob3JlJztcblxuZXhwb3J0IGNsYXNzIFJhdGVMaW1pdGVkQXhpb3NDb25maWcge1xuICBwcm90ZWN0ZWQgc3RhdGljIGxpbWl0UnVsZXM6IFJ1bGVbXSA9IFtdO1xuICBwcm90ZWN0ZWQgc3RhdGljIGxvZ2dlcjogQWJzdHJhY3RMb2dnZXIgPSBuZXcgRHVtbXlMb2dnZXIoKTtcblxuICAvKipcbiAgICogQWRkIG5ldyBydWxlIHRvIGFwcGx5IHJhdGUgbGltaXQgZm9yIGl0XG4gICAqIEBwYXJhbSBwYXR0ZXJuXG4gICAqIEBwYXJhbSByYXRlTGltaXRcbiAgICogQHBhcmFtIHRocm90dGxlV2luZG93XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGFkZFJ1bGUoXG4gICAgcGF0dGVybjogc3RyaW5nLFxuICAgIHJhdGVMaW1pdDogbnVtYmVyLFxuICAgIHRocm90dGxlV2luZG93OiBudW1iZXIsXG4gICAgdGltZW91dDogbnVtYmVyXG4gICkge1xuICAgIFJhdGVMaW1pdGVkQXhpb3NDb25maWcucmVtb3ZlUnVsZShwYXR0ZXJuKTtcbiAgICBSYXRlTGltaXRlZEF4aW9zQ29uZmlnLmxpbWl0UnVsZXMucHVzaCh7XG4gICAgICBwYXR0ZXJuOiBuZXcgUmVnRXhwKHBhdHRlcm4pLFxuICAgICAgc2VtYXBob3JlOiBuZXcgU2VtYXBob3JlKHJhdGVMaW1pdCksXG4gICAgICB0aHJvdHRsZVdpbmRvdzogdGhyb3R0bGVXaW5kb3csXG4gICAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBydWxlIGZyb20gcmF0ZSBsaW1pdGVkIHBhdHRlcm4gbGlzdFxuICAgKiBAcGFyYW0gcGF0dGVyblxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZW1vdmVSdWxlKHBhdHRlcm46IHN0cmluZykge1xuICAgIFJhdGVMaW1pdGVkQXhpb3NDb25maWcubGltaXRSdWxlcyA9XG4gICAgICBSYXRlTGltaXRlZEF4aW9zQ29uZmlnLmxpbWl0UnVsZXMuZmlsdGVyKFxuICAgICAgICAocikgPT4gci5wYXR0ZXJuLnNvdXJjZSAhPT0gcGF0dGVyblxuICAgICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCByYXRlIGxpbWl0IHJ1bGVzXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldFJ1bGVzKCkge1xuICAgIHJldHVybiBSYXRlTGltaXRlZEF4aW9zQ29uZmlnLmxpbWl0UnVsZXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGxvZ2dlciBmb3IgUmF0ZUxpbWl0ZWRBeGlvc1xuICAgKiBAcGFyYW0gbG9nZ2VyXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHNldExvZ2dlcihsb2dnZXI6IEFic3RyYWN0TG9nZ2VyKSB7XG4gICAgUmF0ZUxpbWl0ZWRBeGlvc0NvbmZpZy5sb2dnZXIgPSBsb2dnZXI7XG4gIH1cblxuICAvKipcbiAgICogZ2V0IGxvZ2dlciBvZiBSYXRlTGltaXRlZEF4aW9zXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldExvZ2dlcigpIHtcbiAgICByZXR1cm4gUmF0ZUxpbWl0ZWRBeGlvc0NvbmZpZy5sb2dnZXI7XG4gIH1cbn1cbiJdfQ==