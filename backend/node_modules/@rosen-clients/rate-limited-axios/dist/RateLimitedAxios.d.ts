import originalAxios, { AxiosError, AxiosRequestConfig, AxiosResponse, InternalAxiosRequestConfig } from 'axios';
import { RateLimitedAxiosConfig } from './config';
import { Rule } from './types';
declare module 'axios' {
    interface InternalAxiosRequestConfig {
        meta: {
            release: (() => void) | undefined;
            startedTime: number;
        };
    }
}
declare class RateLimitedAxios extends originalAxios.Axios {
    protected static releaseTimeoutMap: Map<() => void, NodeJS.Timeout>;
    constructor(config?: AxiosRequestConfig);
    /**
     * Releases the request queue associated with the given Axios request configuration.
     * @param config
     * @returns
     */
    protected static releaseQueue: (config: InternalAxiosRequestConfig) => void;
    /**
     * This function manages rate limiting for requests by matching URLs against regex patterns.
     * @param config
     * @returns
     */
    protected static interceptorForRequest: (config: InternalAxiosRequestConfig) => Promise<InternalAxiosRequestConfig<any>>;
    /**
     * Axios response interceptor that triggers queue release logic.
     * @param response
     * @returns
     */
    protected static interceptorForResponse: (response: AxiosResponse) => AxiosResponse<any, any>;
    /**
     * Axios error interceptor that handles failed responses by releasing the request queue.
     * @param error
     * @returns
     */
    protected static interceptorForResponseError: (error: AxiosError) => Promise<never>;
    /**
     * return rate limiter and pattern of received url
     * @param url
     * @returns
     */
    protected static getUrlRule: (url: string) => Rule | undefined;
    /**
     * Create a rate-limited axios instance
     * @param config
     * @returns
     */
    create: (config?: AxiosRequestConfig) => RateLimitedAxios;
}
/**
 * Create a rate-limited axios instance
 * @param config
 * @returns
 */
declare const create: (config?: AxiosRequestConfig) => RateLimitedAxios;
export { create, RateLimitedAxios, RateLimitedAxiosConfig };
//# sourceMappingURL=RateLimitedAxios.d.ts.map