import { create as createAxiosInstance, } from '@rosen-clients/rate-limited-axios';
import JsonBigintFactory from 'json-bigint';
const JsonBigInt = JsonBigintFactory({
    alwaysParseAsBig: false,
    useNativeBigInt: true,
    constructorAction: 'ignore',
    protoAction: 'ignore',
});
const transformBigInt = (obj, bigIntObj, field) => {
    if (Array.isArray(obj)) {
        return obj.map((row, index) => {
            return transformBigInt(row, bigIntObj[index], field);
        });
    }
    if (!Object.hasOwn(obj, field.split('.')[0])) {
        return {
            ...obj,
        };
    }
    if (field.indexOf('.') !== -1) {
        const subKeys = field.split('.');
        return {
            ...obj,
            [subKeys[0]]: transformBigInt(obj[subKeys[0]], bigIntObj[subKeys[0]], subKeys.slice(1).join('.')),
        };
    }
    return { ...obj, [field]: BigInt(bigIntObj[field]) };
};
export const JsonFieldBigintFactory = (fields) => {
    return (data) => {
        try {
            let dataJson = JSON.parse(data);
            const dataBigInt = JsonBigInt.parse(data);
            fields.forEach((field) => {
                dataJson = transformBigInt(dataJson, dataBigInt, field);
            });
            return dataJson;
        }
        catch (e) {
            return data;
        }
    };
};
export const createAxiosInstanceWithHeaders = (url, headers) => {
    const instance = createAxiosInstance();
    instance.defaults.baseURL = url;
    Object.entries(headers).forEach((header) => {
        instance.defaults.headers.common[header[0]] = header[1];
    });
    return (config) => {
        return instance.request(config).then((response) => response.data);
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLE1BQU0sSUFBSSxtQkFBbUIsR0FDOUIsTUFBTSxtQ0FBbUMsQ0FBQztBQUMzQyxPQUFPLGlCQUFpQixNQUFNLGFBQWEsQ0FBQztBQUU1QyxNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQztJQUNuQyxnQkFBZ0IsRUFBRSxLQUFLO0lBQ3ZCLGVBQWUsRUFBRSxJQUFJO0lBQ3JCLGlCQUFpQixFQUFFLFFBQVE7SUFDM0IsV0FBVyxFQUFFLFFBQVE7Q0FDdEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxlQUFlLEdBQUcsQ0FBQyxHQUFRLEVBQUUsU0FBYyxFQUFFLEtBQWEsRUFBTyxFQUFFO0lBQ3ZFLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE9BQVEsR0FBOEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDeEQsT0FBTyxlQUFlLENBQ3BCLEdBQUcsRUFDRixTQUFvQyxDQUFDLEtBQUssQ0FBQyxFQUM1QyxLQUFLLENBQ04sQ0FBQztRQUNKLENBQUMsQ0FBb0IsQ0FBQztJQUN4QixDQUFDO0lBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzdDLE9BQU87WUFDTCxHQUFHLEdBQUc7U0FDUCxDQUFDO0lBQ0osQ0FBQztJQUNELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzlCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakMsT0FBTztZQUNMLEdBQUcsR0FBRztZQUNOLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsZUFBZSxDQUMzQixHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2YsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNyQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FDM0I7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUNELE9BQU8sRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3ZELENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQUMsTUFBcUIsRUFBRSxFQUFFO0lBQzlELE9BQU8sQ0FBQyxJQUFTLEVBQUUsRUFBRTtRQUNuQixJQUFJLENBQUM7WUFDSCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUN2QixRQUFRLEdBQUcsZUFBZSxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDMUQsQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQztRQUNsQixDQUFDO1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNYLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLENBQzVDLEdBQVcsRUFDWCxPQUFrQyxFQUNsQyxFQUFFO0lBQ0YsTUFBTSxRQUFRLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQztJQUN2QyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7SUFDaEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUN6QyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxDQUFJLE1BQTBCLEVBQWMsRUFBRTtRQUNuRCxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkUsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQXhpb3NSZXF1ZXN0Q29uZmlnLFxuICBjcmVhdGUgYXMgY3JlYXRlQXhpb3NJbnN0YW5jZSxcbn0gZnJvbSAnQHJvc2VuLWNsaWVudHMvcmF0ZS1saW1pdGVkLWF4aW9zJztcbmltcG9ydCBKc29uQmlnaW50RmFjdG9yeSBmcm9tICdqc29uLWJpZ2ludCc7XG5cbmNvbnN0IEpzb25CaWdJbnQgPSBKc29uQmlnaW50RmFjdG9yeSh7XG4gIGFsd2F5c1BhcnNlQXNCaWc6IGZhbHNlLFxuICB1c2VOYXRpdmVCaWdJbnQ6IHRydWUsXG4gIGNvbnN0cnVjdG9yQWN0aW9uOiAnaWdub3JlJyxcbiAgcHJvdG9BY3Rpb246ICdpZ25vcmUnLFxufSk7XG5cbmNvbnN0IHRyYW5zZm9ybUJpZ0ludCA9IChvYmo6IGFueSwgYmlnSW50T2JqOiBhbnksIGZpZWxkOiBzdHJpbmcpOiBhbnkgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIChvYmogYXMgdW5rbm93biBhcyBBcnJheTxKU09OPikubWFwKChyb3csIGluZGV4KSA9PiB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtQmlnSW50KFxuICAgICAgICByb3csXG4gICAgICAgIChiaWdJbnRPYmogYXMgdW5rbm93biBhcyBBcnJheTxKU09OPilbaW5kZXhdLFxuICAgICAgICBmaWVsZFxuICAgICAgKTtcbiAgICB9KSBhcyB1bmtub3duIGFzIEpTT047XG4gIH1cbiAgaWYgKCFPYmplY3QuaGFzT3duKG9iaiwgZmllbGQuc3BsaXQoJy4nKVswXSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ub2JqLFxuICAgIH07XG4gIH1cbiAgaWYgKGZpZWxkLmluZGV4T2YoJy4nKSAhPT0gLTEpIHtcbiAgICBjb25zdCBzdWJLZXlzID0gZmllbGQuc3BsaXQoJy4nKTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ub2JqLFxuICAgICAgW3N1YktleXNbMF1dOiB0cmFuc2Zvcm1CaWdJbnQoXG4gICAgICAgIG9ialtzdWJLZXlzWzBdXSxcbiAgICAgICAgYmlnSW50T2JqW3N1YktleXNbMF1dLFxuICAgICAgICBzdWJLZXlzLnNsaWNlKDEpLmpvaW4oJy4nKVxuICAgICAgKSxcbiAgICB9O1xuICB9XG4gIHJldHVybiB7IC4uLm9iaiwgW2ZpZWxkXTogQmlnSW50KGJpZ0ludE9ialtmaWVsZF0pIH07XG59O1xuZXhwb3J0IGNvbnN0IEpzb25GaWVsZEJpZ2ludEZhY3RvcnkgPSAoZmllbGRzOiBBcnJheTxzdHJpbmc+KSA9PiB7XG4gIHJldHVybiAoZGF0YTogYW55KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBkYXRhSnNvbiA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICBjb25zdCBkYXRhQmlnSW50ID0gSnNvbkJpZ0ludC5wYXJzZShkYXRhKTtcbiAgICAgIGZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICBkYXRhSnNvbiA9IHRyYW5zZm9ybUJpZ0ludChkYXRhSnNvbiwgZGF0YUJpZ0ludCwgZmllbGQpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGF0YUpzb247XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUF4aW9zSW5zdGFuY2VXaXRoSGVhZGVycyA9IChcbiAgdXJsOiBzdHJpbmcsXG4gIGhlYWRlcnM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH1cbikgPT4ge1xuICBjb25zdCBpbnN0YW5jZSA9IGNyZWF0ZUF4aW9zSW5zdGFuY2UoKTtcbiAgaW5zdGFuY2UuZGVmYXVsdHMuYmFzZVVSTCA9IHVybDtcbiAgT2JqZWN0LmVudHJpZXMoaGVhZGVycykuZm9yRWFjaCgoaGVhZGVyKSA9PiB7XG4gICAgaW5zdGFuY2UuZGVmYXVsdHMuaGVhZGVycy5jb21tb25baGVhZGVyWzBdXSA9IGhlYWRlclsxXTtcbiAgfSk7XG4gIHJldHVybiA8VD4oY29uZmlnOiBBeGlvc1JlcXVlc3RDb25maWcpOiBQcm9taXNlPFQ+ID0+IHtcbiAgICByZXR1cm4gaW5zdGFuY2UucmVxdWVzdDxUPihjb25maWcpLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5kYXRhKTtcbiAgfTtcbn07XG4iXX0=